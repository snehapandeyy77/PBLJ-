import java.io.*;
import java.util.*;

// Serializable Student class
class Student implements Serializable {
    private static final long serialVersionUID = 1L;
    private String name;
    private int rollNo;
    private double cgpa;

    public Student(String name, int rollNo, double cgpa) {
        this.name = name;
        this.rollNo = rollNo;
        this.cgpa = cgpa;
    }
    public String getName() { return name; }
    public int getRollNo() { return rollNo; }
    public double getCgpa() { return cgpa; }

    @Override
    public String toString() {
        return "Student[name=" + name + ", rollNo=" + rollNo + ", cgpa=" + cgpa + "]";
    }
}

// Employee class for file-based management
class Employee {
    private int empId;
    private String name;
    private double salary;

    public Employee(int empId, String name, double salary) {
        this.empId = empId;
        this.name = name;
        this.salary = salary;
    }

    public int getEmpId() { return empId; }
    public String getName() { return name; }
    public double getSalary() { return salary; }

    @Override
    public String toString() {
        // CSV style
        return empId + "," + name + "," + salary;
    }

    public static Employee fromString(String str) {
        String[] parts = str.split(",");
        int id = Integer.parseInt(parts[0]);
        String nm = parts[1];
        double sal = Double.parseDouble(parts[2]);
        return new Employee(id, nm, sal);
    }
}

public class CombinedApp {
    private static final String EMP_FILE = "employees.txt";
    private static final String STUDENT_SER_FILE = "student.ser";

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            showMainMenu();
            int choice = -1;
            try {
                choice = sc.nextInt();
            } catch (InputMismatchException ime) {
                System.out.println("Invalid input. Please enter number.");
                sc.next(); // consume bad token
                continue;
            }
            sc.nextLine(); // consume newline
            switch (choice) {
                case 1:
                    doSumIntegers(sc);
                    break;
                case 2:
                    doStudentSerialization(sc);
                    break;
                case 3:
                    doEmployeeManagement(sc);
                    break;
                case 4:
                    System.out.println("Exiting program. Goodbye!");
                    sc.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }

    private static void showMainMenu() {
        System.out.println("\n=== Combined Application ===");
        System.out.println("1. Sum of Integers (Autoboxing / Unboxing)");
        System.out.println("2. Serialize / Deserialize Student");
        System.out.println("3. Employee Management (File Handling)");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    // Part (a): Sum using autoboxing / unboxing
    private static void doSumIntegers(Scanner sc) {
        System.out.print("How many integers? ");
        int n = sc.nextInt();
        List<Integer> list = new ArrayList<>();
        System.out.println("Enter " + n + " integers:");
        for (int i = 0; i < n; i++) {
            int x = sc.nextInt();
            list.add(x);  // autoboxing
        }
        int sum = 0;
        for (Integer obj : list) {
            sum += obj;  // unboxing
        }
        System.out.println("Sum = " + sum);
    }

    // Part (b): Student serialization / deserialization
    private static void doStudentSerialization(Scanner sc) {
        System.out.println("\n--- Student Serialization Menu ---");
        System.out.println("1. Create & Serialize Student");
        System.out.println("2. Deserialize & Display Student");
        System.out.print("Enter option: ");
        int opt = sc.nextInt();
        sc.nextLine();
        if (opt == 1) {
            System.out.print("Enter student name: ");
            String name = sc.nextLine();
            System.out.print("Enter roll number: ");
            int roll = sc.nextInt();
            System.out.print("Enter CGPA: ");
            double cg = sc.nextDouble();
            Student s = new Student(name, roll, cg);
            serializeStudent(s, STUDENT_SER_FILE);
        } else if (opt == 2) {
            Student s = deserializeStudent(STUDENT_SER_FILE);
            if (s != null) {
                System.out.println("Deserialized Student: " + s);
            }
        } else {
            System.out.println("Invalid option.");
        }
    }

    private static void serializeStudent(Student s, String filename) {
        try (FileOutputStream fos = new FileOutputStream(filename);
             ObjectOutputStream oos = new ObjectOutputStream(fos)) {
            oos.writeObject(s);
            System.out.println("Student serialized to file: " + filename);
        } catch (IOException e) {
            System.err.println("Error serializing: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static Student deserializeStudent(String filename) {
        try (FileInputStream fis = new FileInputStream(filename);
             ObjectInputStream ois = new ObjectInputStream(fis)) {
            Student s = (Student) ois.readObject();
            System.out.println("Student deserialized from file: " + filename);
            return s;
        } catch (IOException | ClassNotFoundException e) {
            System.err.println("Error deserializing: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    // Part (c): Employee management with file handling
    private static void doEmployeeManagement(Scanner sc) {
        while (true) {
            showEmployeeMenu();
            int ch = -1;
            try {
                ch = sc.nextInt();
            } catch (InputMismatchException ime) {
                System.out.println("Invalid input. Please enter number.");
                sc.next();
                continue;
            }
            sc.nextLine();
            switch (ch) {
                case 1:
                    addEmployee(sc);
                    break;
                case 2:
                    displayAllEmployees();
                    break;
                case 3:
                    searchEmployeeById(sc);
                    break;
                case 4:
                    deleteEmployeeById(sc);
                    break;
                case 5:
                    return;  // go back to main menu
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }

    private static void showEmployeeMenu() {
        System.out.println("\n--- Employee Menu ---");
        System.out.println("1. Add Employee");
        System.out.println("2. Display All Employees");
        System.out.println("3. Search Employee by ID");
        System.out.println("4. Delete Employee by ID");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter choice: ");
    }

    private static void addEmployee(Scanner sc) {
        System.out.print("Enter employee ID: ");
        int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter name: ");
        String name = sc.nextLine();
        System.out.print("Enter salary: ");
        double sal = sc.nextDouble();

        Employee e = new Employee(id, name, sal);
        try (FileWriter fw = new FileWriter(EMP_FILE, true);
             BufferedWriter bw = new BufferedWriter(fw);
             PrintWriter pw = new PrintWriter(bw)) {
            pw.println(e.toString());
            System.out.println("Employee added.");
        } catch (IOException ex) {
            System.err.println("Error writing to file: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    private static List<Employee> readAllEmployees() {
        List<Employee> list = new ArrayList<>();
        File f = new File(EMP_FILE);
        if (!f.exists()) {
            return list;
        }
        try (BufferedReader br = new BufferedReader(new FileReader(f))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.trim().isEmpty()) continue;
                try {
                    Employee e = Employee.fromString(line);
                    list.add(e);
                } catch (Exception ex) {
                    System.err.println("Skipping invalid record: " + line);
                }
            }
        } catch (IOException ex) {
            System.err.println("Error reading employees: " + ex.getMessage());
            ex.printStackTrace();
        }
        return list;
    }

    private static void displayAllEmployees() {
        List<Employee> list = readAllEmployees();
        if (list.isEmpty()) {
            System.out.println("No employees to display.");
        } else {
            System.out.println("List of employees:");
            for (Employee e : list) {
                System.out.println("ID: " + e.getEmpId() + ", Name: " + e.getName() + ", Salary: " + e.getSalary());
            }
        }
    }

    private static void searchEmployeeById(Scanner sc) {
        System.out.print("Enter ID to search: ");
        int id = sc.nextInt();
        boolean found = false;
        for (Employee e : readAllEmployees()) {
            if (e.getEmpId() == id) {
                System.out.println("Found: ID: " + e.getEmpId() + ", Name: " + e.getName() + ", Salary: " + e.getSalary());
                found = true;
                break;
            }
        }
        if (!found) {
            System.out.println("Employee with ID " + id + " not found.");
        }
    }

    private static void deleteEmployeeById(Scanner sc) {
        System.out.print("Enter ID to delete: ");
        int id = sc.nextInt();
        List<Employee> list = readAllEmployees();
        boolean removed = false;
        Iterator<Employee> it = list.iterator();
        while (it.hasNext()) {
            Employee e = it.next();
            if (e.getEmpId() == id) {
                it.remove();
                removed = true;
            }
        }
        if (!removed) {
            System.out.println("Employee with ID " + id + " not found.");
        } else {
            // rewrite the file
            try (PrintWriter pw = new PrintWriter(new FileWriter(EMP_FILE))) {
                for (Employee e : list) {
                    pw.println(e.toString());
                }
                System.out.println("Employee with ID " + id + " deleted.");
            } catch (IOException ex) {
                System.err.println("Error updating file: " + ex.getMessage());
                ex.printStackTrace();
            }
        }
    }
}
